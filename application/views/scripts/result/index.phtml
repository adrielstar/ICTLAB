<!--Author Isaac de Cuba-->
<!--Editor Adriel Walter, Serhildan Akdeniz-->
<div class="row">
    <div class="col-md-4">
        <h3>Beschikbare huizen</h3>
    </div>
    <div class="col-md-8">
        <h3>Map</h3>
    </div>
</div>
<?php

$SolrBuurtCall = new Application_Model_Solr_BuurtCall();

$processor = new Application_Model_Processor();

$buurt = $SolrBuurtCall->getBuurt($SolrBuurtCall->getName($this->buurt));
// get polygon buurt in array
$polygonBuurt = $processor->getPolygonFromArray($SolrBuurtCall->getPolygon($this->buurt));

$aangrenzendeBuurten = $SolrBuurtCall->getAangrenzendeBuurten($this->params['buurt']);


$filteredPolygon = array();

foreach ($aangrenzendeBuurten as $aangrenzebuurt) {
    $aangrenspoly = $processor->getPolygonFromArray($SolrBuurtCall->getPolygon($aangrenzebuurt));
    if ($aangrenspoly) {
        array_push($filteredPolygon, $aangrenspoly);
    }
}

$filternamArray = array();
foreach ($aangrenzendeBuurten as $aangrenzendeBuurt) {
    $aangrenz = $SolrBuurtCall->getName($aangrenzendeBuurt);
    if ($aangrenz) {
        array_push($filternamArray, $aangrenz);
    }
   echo($aangrenz);
}

$markerPoints = $this->collection;
$polygon = geoPHP::load("$polygonBuurt", "wkt");
$filteredCollection = array();
foreach ($markerPoints as $value) {
    $point1 = geoPHP::load("POINT($value->WGS84_Y $value->WGS84_X)", "wkt");
    if ($polygon->contains($point1)) {
        array_push($filteredCollection, $value);
    }
}
?>
<div class="row">
    <div class="col-md-4 col-sm-3 pre-scrollable">
        <ul class="list-group">
            <script>
                var collection = <?php echo json_encode($filteredCollection); ?>;
                var lat = <?php echo json_encode($this->lat); ?>;
                var lng = <?php echo json_encode($this->lng); ?>;
                var polygon =<?php echo json_encode($polygonBuurt); ?>;
                var aagrenzendeNaam = <?php echo json_encode($filternamArray); ?>;
                var aangrezendePolygon = <?php echo json_encode($filteredPolygon); ?>;
            </script>

            <li id="side_bar" class="list-group-item"></li>
            <div class="row">
                <div class="col-md-12" align="center">
                    <ul class="pagination">
                        <?php
                        (array_key_exists('startp', $this->params) ? $start = $this->params["startp"] : $start = 1);
                        echo "<li " . ($start <= 1 ? "class='disabled'" : '') . "><a href='/result?buurt=" . $this->buurt . "&stad=" . $this->stad . "&page=p" . ($start - 1) . "&startp=" . ($start - 5) . "'>&laquo;</a></li>";

                        $max = 5 + $start;
                        for ($i = $start; $i < $max; $i++) {
                            if ((!isset($this->params["startp"]) || !isset($this->params["page"])) && $i == $start) {
                                echo "<li class='active'><a href='/result?buurt=" . $this->buurt . "&stad=" . $this->stad . "&page=p" . $i . "&startp=" . $start . "'>$i</a></li>";
                            } else {
                                echo "<li " . (in_array('p' . $i, $this->params) ? "class='active'" : '') . "><a href='/result?buurt=" . $this->buurt . "&stad=" . $this->stad . "&page=p" . $i . "&startp=" . $start . "'>$i</a></li>";
                            }
                        }
                        echo "<li><a href='/result?buurt=" . $this->buurt . "&stad=" . $this->stad . "&page=p" . $i . "&startp=" . $i . "'>&raquo;</a></li>";
                        ?>
                    </ul>
                </div>
            </div>
        </ul>
    </div>
    <div class="col-md-8 col-sm-9">
        <div id="map-canvas"/>
    </div>
    <script>
        var map;
        var infoWindow = new google.maps.InfoWindow();
        var infoPopUp = new google.maps.InfoWindow();
        // this variable will collect the html which will eventually be placed in the side_bar
        var side_bar_html = "";

        // arrays to hold copies of the markers and html used by the side_bar
        var gmarkers = [];

        var icon = new google.maps.MarkerImage('images/house-marker.png');
        var icon2 = new google.maps.MarkerImage('images/MousOver-house-marker.png');

        // This function picks up the click and opens the corresponding info window
        function myclick(i) {
            google.maps.event.trigger(gmarkers[i], "click");
        }
        function initialize() {
            var mapOptions = {
                minZoom: 8, //minimum zoom level van de kaart
                zoom: 12,
                center: new google.maps.LatLng(lat, lng),
                disableDefaultUI: true,
                mapTypeControl: false,
                zoomControl: true
            }

            map = new google.maps.Map(document.getElementById('map-canvas'),
                mapOptions);

            for (var i = 0; i < collection.length; i++) {
                housePhoto = '<img src="' + collection[i]['Foto'] + '">';
                houseSquare = 'Oppervlakte: ' + collection[i]['Woonoppervlakte'] + ' m' + '<sup>2</sup>';
                housePrice = 'Prijs: &#8364;' + collection[i]['Koopprijs'];
                houseMakelaar = 'Makelaar: ' + collection[i]['MakelaarNaam'];
                houseAdress = collection[i]['Adres'];
                houseRooms = 'Aantal kamers: ' + collection[i]['AantalKamers'];
                myLatLng = new google.maps.LatLng(collection[i]['WGS84_Y'], collection[i]['WGS84_X']);
                houseMarker = new google.maps.Marker({
                    position: myLatLng,
                    map: map,
                    icon: icon
                });

                //Create List Details
                var houseAdressDetails =
                    houseAdress + '<br>';

                var adressHouseDetails =
                    houseRooms + '<br>' +
                    housePrice + '<hr />';

                gmarkers.push(houseMarker);

                // add a line to the side_bar html
                var marker_id = gmarkers.length - 1;

                side_bar_html += '<a class ="listmarker" href="javascript:myclick(' + marker_id + ')' +
                '" onmouseover="gmarkers[' + marker_id + '].setIcon(icon2)' +
                '" onmouseout="gmarkers[' + marker_id + '].setIcon(icon)">' + '<h4> ' + houseAdressDetails + '</h4></a>';

                //Details from select Adress
                side_bar_html += '<p>' + adressHouseDetails + '</p>';

                var details =
                    '<p class="text-center">' +
                    '<h5>' + houseAdress + '</h5>' +
                    housePrice + '<br />' +
                    houseRooms + '<br />' +
                    houseSquare + '<br />' +
                    houseMakelaar + '<br />' +
                    '<div class="img-responsive">' + housePhoto + '</div>' +
                    '</p>';

                var detailsPopUp = '<p class="text-center">' + houseAdress + ", " + housePrice + '</p>';

                addInfoWindow(houseMarker, details);
                addPopupWindow(houseMarker, detailsPopUp);

            }

            //polygons is WKT = Well-known text (WKT) is a text markup
            // language for representing vector geometry objects on a map.
            var polygons = polygon;
            var aangrenzendePolygon = aangrezendePolygon;

            //using Regular expression, this will get the indivudal Polygon Rings
            var regExpression = /\(([^()]+)\)/g;
            var Rings = [];
            var Ringss = [];
            var results;
            var aangrensResults;

            while (results = regExpression.exec(polygons)) {
                Rings.push(results[1]);
            }

            while (aangrensResults = regExpression.exec(aangrenzendePolygon)) {
                Ringss.push(aangrensResults[1]);
            }

            // searched buurt
            var patchArray = [];

            // aangrenzende buurten
            var aangrenzendePolygons = []

            //Draw the polygon for each of inner rings
            for (i = 0; i < Rings.length; i++) {
                AddPoints(Rings[i]);
            }

            //Draw the polygon aangrens for each of inner rings
            for (i = 0; i < Ringss.length; i++) {
                pointsData = Ringss[i].split(",");
                aangrenzendePolygonPoints = [];

                for (j = 0; j < pointsData.length; j++) {
                    coordinates = pointsData[j].split(" ");
                    point = new google.maps.LatLng(parseFloat(coordinates[0]), parseFloat(coordinates[1]));
                    aangrenzendePolygonPoints.push(point);
                }

                polygon = new google.maps.Polygon({
                    paths: aangrenzendePolygonPoints,
                    strokeColor: '#FF0000',
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: '#FF0000',
                    fillOpacity: 0.35,
                    indexID: j
                });

                aangrenzendePolygons.push(polygon);

                google.maps.event.addListener(polygon, 'click', showInfo);
                google.maps.event.addListener(polygon, 'mouseover', colorActive);
                google.maps.event.addListener(polygon, 'mouseout', colorNormal);

                infowindow = new google.maps.InfoWindow();

            }

            for (i = 0; i < aangrenzendePolygons.length; i++) {
                aangrenzendePolygons[i].setMap(map);
            }

            var poly = new google.maps.Polygon({
                paths: patchArray,
                clickable: false,
                fillColor: '#FFF',
                fillOpacity: 0,
                strokeColor: '#ffa500',
                strokeOpacity: 1,
                strokeWeight: 3,
                zIndex: 99
            });

            poly.setMap(map);


            /**
             * Create google maps points and push them into an Array
             *
             * @param data
             * @param array
             * @constructor
             */
            function AddPoints(data, array) {
                //Spilt the string into individual points
                var pointsData = data.split(",");

                var point = pointsData.length;

                for (var i = 0; i < point; i++) {
                    var coordination = pointsData[i].split(" ");
                    //console.log(coordination);
                    var buurtPoly = new google.maps.LatLng(parseFloat(coordination[0]), parseFloat(coordination[1]));

                    patchArray.push(buurtPoly);

                }
            }


            function colorActive() {
                this.setOptions({fillColor: '#000000'});
            }

            function colorNormal() {
                this.setOptions({fillColor: '#FF0000'});
            }

            function showInfo(event) {

                    var contentString = <?php echo json_encode($this->SolrA); ?> + ": " + <?php echo json_encode($this->SolrB); ?> + "<br />";

                console.log(aagrenzendeNaam);
                contentString += "<br /><a href='#'>Zoom to</a><br />"; // later Zoomto need to be function that will change the search function to the current location.
                // Replace our Info Window's content and position
                infowindow.setContent(contentString);
                infowindow.setPosition(event.latLng);
                infowindow.open(map);

            }

            document.getElementById("side_bar").innerHTML = side_bar_html;

            var allowedBounds = new google.maps.LatLngBounds(
                new google.maps.LatLng(50.690492, 3.167453),
                new google.maps.LatLng(53.587940, 6.993237)
            );
            var lastValidCenter = map.getCenter();

            google.maps.event.addListener(map, 'center_changed', function () {
                if (allowedBounds.contains(map.getCenter())) {

                    lastValidCenter = map.getCenter();
                    return;
                }

                map.panTo(lastValidCenter);
            });
        }

        google.maps.event.addDomListener(window, 'load', initialize);

        function addInfoWindow(houseMarker, details) {
            google.maps.event.addListener(houseMarker, 'click', function () {
                if (!houseMarker.open) {
                    infoWindow.setContent(details);
                    infoWindow.open(map, houseMarker);
                    houseMarker.open = true;
                }
                else {
                    infoWindow.close(map, houseMarker);
                    houseMarker.open = false;
                }
            });

        }
        function addPopupWindow(houseMarker, detailsPopUp) {
            google.maps.event.addListener(houseMarker, 'mouseover', function () {
                infoPopUp.setContent(detailsPopUp);
                infoPopUp.open(map, houseMarker);
                houseMarker.setIcon(icon2);
            });

            google.maps.event.addListener(houseMarker, 'mouseout', function () {
                infoPopUp.close();
                houseMarker.setIcon(icon);

            });
        }
    </script>
</div>
</div>
<?php

